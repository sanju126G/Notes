Angular Notes

Angualar 6 Imp Topics

1)Components.

2)Component interaction.

@input @output DOM manipulation using @ViewChild

eventemitter

3)Pipes- inbuilt and custom pipes.

4)All kinds of Data Binding. And ** Event Binding

banana Operator , Angular expression

5)Directives- inbuilt and custom

6)Routing

7)Dependency Injection and how it is achieved in angular

8)Modules

9)filters

10)Services

behaviorsubject

@Injectable()

11)Angular Forms

12)rxjs operators And observables.

13)REST API Implementation

14)Angular Scopes

15)Angular material and Templates

17)ngrx and Redux

18)Change Detection Strategies

19)Subscribe();

20)how to do unit testing in angular using karma/jasmine.

21)what are all the methods we can use on observables



1. What is angular ?.
	-> The Angular is a development platform for building a Single Page Application for mobile and desktop.
	-> It uses Typescript & HTML to build Apps. The Angular itself is written using the Typescript.
	-> It comes with features like component, Modules, Directives, Forms, Pipes, HTTP Services, Dependency Injection, Data Binding , Routing, etc..,

1.1 What do you mean by single page applications.?
	-> A single-page application is an app that doesn’t need to reload the page during its use and works within a browser.

2. Components :- 
	-> In Angular, components are the basic building blocks, which control a part of the UI for any application.
	-> A component is defined using the @Component decorator.
	-> Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component,
	   and a class that contains the business logic for the component.

3.  Modules :- 
	-> A module is a place where we can group components, directives, services, and pipes which are related to the Application Developmnet.
	-> Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements.
	-> Every module is defined with a @NgModule decorator.
	-> By default, modules are of two types:
		1. Root Module.
		2. Feature Module.
	-> Every application can have only one root module whereas, it can have one or more feature modules.
	-> A root module imports BrowserModule, whereas a feature module imports CommonModule.

4. Directives in angular ?.
	-> Directives are classes that add additional behavior to elements in our Angular applications.
	-> Directives can extend, Change  or modify behavior of the DOM elements.
	-> Angular suports four types of Directives.
		1.Component Directive.
             -> Directives with a template, Most common directive used throughout the app

		2.Attribut Directives.
            -> directives that change the appearance or behavior of an element, component, or another directive.
            -> Many NgModules such as the RouterModule and the FormsModule define their own attribute directives. 
            -> The most common attribute directives are as follows:
                1.ngClass.
				2.ngStyle.
				3.ngModle.

		3.Structural Directices.
            -> directives that change the DOM layout by adding and removing DOM elements.
            -> Structural directives are responsible for HTML layout. 
            -> They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.
            -> There are three types of structural Directices
                1. ngIf.
                2. ngFor.
                3. ngSwitch.

		4. custom Directive 
			-> custom directive is a user-defined directive that provides users to use desired functions to extend HTML functionality.
			-> Command to generate directive using cli is :-- ng g d directiveName.

4.1 Angular forms.?
	-> There are two types o form in angular.

	1.Template Driven Forms [TDF].
		-> Fully programmed in component’s template.
		-> Angular is responsible for generating the JS Object Representation of the form.
		-> Template defines structure of the form.
		-> Validation rules are also defined in the template.
		-> syntax of TDF :-

			<form #myForm="ngForm" (ngSubmit)="submit(myForm)">

				<div class="form-group">
					<label>Name</label>
					<input type="text" class="form-control" name="name" [(ngModel)]="model.name" required>
				</div>

				<div class="form-group">
					<label>Email</label>
					<input type="email" class="form-control" name="email" [(ngModel)]="model.email" required>
				</div>

				<div class="form-group">
					<label>Password</label>
					<input type="password" class="form-control" name="password" [(ngModel)]="model.password" required>
				</div>

				<div class="form-group">
					<button class="btn btn-primary btn-block" type="submit">Submit</button>
				</div>
			</form>

	2. Reactive Forms.
		-> Form model created programmatically in the code (typescript code).
		-> Template can be dynamically generated based on the model.
		-> FormControls and FormGroups can be added dynamically in FormArrays.
		-> syntax of reactive form.
		
		->inside component class

			class ReactiveForm {
				reactiveForm:FormGroup

				constructor () {
					this.reactiveForm = new FormGroup({
						name:new FormControl('', [Validators.required, Validators.minLength(5)]),
						email: new FormControl('', [Validators.required, Validators.email]),
						password: new FormControl('', [Validators.required, Validators.minLength(8)])
					})
				}

				onSubmit() {
					console.log(this.reactiveForm.value);
				}
			}
		
		-> inside template
			<form [formGroup]="reactiveForm" (ngSubmit)="onSubmit()">

				<input type="name" formControlName="name">
					<div *ngIf="reactiveForm.name.touched && reactiveForm.name.invalid" class="alert alert-danger">
           				<div *ngIf="reactiveForm.name.errors.required">Name is required.</div>
           				<div *ngIf="reactiveForm.name.errors.minlength">Name should be 3 character.</div>
        			</div>

				<input type="email" formControlName="email">
				<div *ngIf="f.email.touched && f.email.invalid" class="alert alert-danger">
           			<div *ngIf="f.email.errors.required">Email is required.</div>
            		<div *ngIf="f.email.errors.email">Please, enter valid email address.</div>
        		</div>

				<input type="password" formControlName="password">

				<button type="submit">submit form</button>

			</form>

5. Pipes ?.
	-> The Angular Pipe takes the raw data as input and then transforms the raw data into some desired format.
	-> So in simple words, we can say that the angular pipes transform the data into a specific format before displaying them to the end-users.
	-> There Are four Types of pipes that we can use in angular :-
		1. Built-in pipes
			-> lowercase. 
			-> uppercase.
			-> currency.
			-> date. For example :- {{today | date}}  which gives the output "April 16, 2018 "
			-> decimal.
			-> percent.
		2. parameterized Pipes
			-> we can pass one are more parameters to pipe.
			-> for example:- {{today | date : ‘fullDate’}}  which gives the output "Monday, April 16, 2018 "

		3. chaining pipes.
			-> we can connect multiple pipes to a single data input.

		4. Custom pipes.
			-> In addtion to built-in pipes we can also create our own pipes using the Command ng g p <pipeName>

6. Services :-
	-> An angular service is simply a Class that allows you to access it’s defined properties and methods
	-> Services are objects which get instantiated only once during the lifetime of an application. 
	-> The main objective of a service is to share data, functions with different components of an Angular application.
	-> A service is defined using a @Injectable decorator. A function defined inside a service can be invoked from any component or directive.

7.  Dependency Injection ?.
	-> Dependency injection is an application design pattern which is implemented by Angular.
	-> dependencies in angular are nothing but services which have a functionality.
	-> Functionality of a service, can be needed by various components and directives in an application.
	-> Angular provides a smooth mechanism by which we can inject these dependencies in our components and directives.
	-> So basically, we are just making dependencies which are injectable across all components of an application.

8. Data Binding ?.
	-> Data Binding is a process that creates a connection to communicate and synchronize between the user interface and the data.
	-> In other words, we can say that Data Binding means to interact with the data and view. So, the interaction between the templates (View) and the business logic is called data binding.
	-> Types of Data Binding in Angular:
		-> DATA Binding:-
			-> One-Way Data Binding.
				-> Component to View.
			   		1. Interpolation. {{}}
					2. Style Binding. []
					3. class Binding. []
					4. property Binding. []
					5. Attribute Binding. attr.attributeName for example:- <th attr.colspan={{colSpan}}></th>
			   	-> View to Component. 
			   		1. Event Binding.
			-> Two Way Data Binding. 
				-> [(ngModel)]

9. Routing in angular ?.
	-> Angular routing is the method to direct the users to the relevant page that they want to perform their actions.
	-> In other words, There may be multiple components in a single angular app. Routing is the way to implement the connection between those components.

10. lifecycle hooks in Angular ?.
	-> Every component in Angular has a lifecycle, different phases it goes through from the time of creation to the time it's destroyed.
	-> Angular provides hooks to tap into these phases and trigger changes at specific phases in a lifecycle.
	-> Life-Cycle-Hook's Are Defined Below :-
		1. ngOnChanges( ) :-
			 -> This hook/method is called before ngOnInit and whenever one or more input properties of the component changes.
			 -> This method/hook receives a SimpleChanges object which contains the previous and current values of the property.
		2. ngOnInit( ) :- 
			-> This hook gets called once, after the ngOnChanges hook.
			-> It initializes the component and sets the input properties of the component.
		3. ngDoCheck( ) :-
			-> It gets called after ngOnChanges and ngOnInit and is used to detect and act on changes that cannot be detected by Angular.
			-> We can implement our change detection algorithm in this hook.
		4. ngAfterContentInit( ) :-
			-> It gets called after the first ngDoCheck hook.
			-> This hook responds after the content gets projected inside the component.
		5. ngAfterContentChecked( ) :-
			-> It gets called after ngAfterContentInit and every subsequent ngDoCheck.
			-> It responds after the projected content is checked.
		6. ngAfterViewInit( ) :-
			-> It responds after a component's view, or a child component's view is initialized.
		7. ngAfterViewChecked( ) :-
			-> It gets called after ngAfterViewInit, and it responds after the component's view, or the child component's view is checked.	
		8. ngOnDestroy( ) :-
			-> It gets called just before Angular destroys the component. This hook can be used to clean up the code and detach event handlers.

11. Explain string interpolation and property binding in Angular.
	-> Data-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).
	-> Data-binding can be done in two ways, one-way binding and two-way binding.
	-> String interpolation and property binding are parts of data-binding in Angular.
	-> String interpolation and property binding allow only one-way data binding.
	-> String interpolation uses the double curly braces {{ }} to display data from the component.
	-> Using property binding, we can bind the DOM properties of an HTML element to a component's property.
	-> Property binding uses the square brackets [ ] syntax.

12. Observables:- 
	-> Observables are sequence of data that are gets emitted from time to time or over peiod of time.
	-> Observables provide support for passing messages between parts of our appliaction.
	-> Observables are the recommanded technique for event handling, Asynchronous programming, and handling multiple values.

13. what are the all the Methods we can use on observables ?.


14. What is RxJs in angular .?
	-> RxJs is a library for Composing and event-based programm by using observables sequences.
	-> it provides one core type, the Observable, satellite types (Observer,Schedulers,Subjects) 
	   and operators inspired by Array#extras(map,filter,reduce,every,ect) to allow handling Asynchronous events as collections)

15. Compilation in angular .?
	-> An angular application mainly consists of HTML templates, their components which include various TypeScript files. 
	-> There are some unit testing and configuration file. 
	-> Whenever we run over an application, the browser cannot understand the code directly, hence we have to compile our code.
	-> angular provides two ways to compile our project 1. AOT Compiler and JIT Compiler
	-> By default, aot is set to true for new CLI applications.

	-> What is Ahead of Time (AOT) compiler ?
		-> In simple words, when you serve/build your angular application, the Ahead of Time compiler converts your code during the build time before your browser downloads and runs that code.
		-> From Angular 9, by default compiling option is set to true for ahead of time compiler. 

	-> what is Just In Time compiler ?
		-> Just in time compiler compiles each file separately and it’s mostly compiled in the browser. 
		-> You don’t have to build your project again after changing your code.
		-> Most compiling is done on the browser side, so it will take less compiling time.
		-> Just in Time compiler is best when your application is in local development.