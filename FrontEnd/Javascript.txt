Postal Code API :- https://api.worldpostallocations.com/pincode?postalcode=560085&countrycode=IN

Goggle Meet link :- https://meet.google.com/hho-xbif-qzu


Javascript Notes

1. What is JavaScript?
	-> JavaScript is a Light-Weight, interpreted, Object-Oriented, Cross-platform and dynamic type Scripting Language.
	-> JavaScript is Used To enable Dynamic interactivity on webpages.

		1. Lightweight programming language are those which have following features:-

			a. Syntax and features uses the least hardware and software resources possible.
			b. Use very less memory to execute.
			c. Easily portable/Less size.

	 	2. InterPreter:-
			
			-> The interpreter converts the source code line-by-line during RUN Time.
			-> Interpreter allows evaluation and modification of the program while it is executing.
			-> Hence, Relatively less time spent for analyzing and processing the program.

		3.Compiler:- 
			-> A compiler is a computer program that transforms code written in a high-level programming language into the machine code. 

		4. Diffrence Between Compiler And interpreter.

			-> We need to convert the source code into machine code and this is accomplished by compilers and interpreters.
			-> Hence, a compiler or an interpreter is a program that converts program written in high-level language into machine code understood by the computer.
			
			-> Compiler transforms code written in a high-level programming language into the machine code, at once, before program runs.
			-> whereas an Interpreter coverts each high-level program statement, one by one, into the machine code, during program run.

			-> Compiled code runs faster while interpreted code runs slower.
			-> Compiler displays all errors after compilation, on the other hand, the Interpreter displays errors of each line one by one.
			-> Compiler is based on translation linking-loading model, whereas Interpreter is based on Interpretation Method.
		
			-> Linking and Loading are the utility programs that play a important role in the execution of a program. 
				-> Linking intakes the object codes generated by the assembler and combines them to generate the executable module. 
				-> On the other hand, the loading loads this executable module to the main memory for execution.

		5.Object-Oriented:-

			-> Object-oriented programming can be defined to be:

				-> a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.

			-> JavaScript is an object-oriented programming language. 
			-> Almost everything in JavaScript is an object. 
			-> You can also implement the main concepts of object-oriented programming which are encapsulation, inheritance, and polymorphism using JavaScript. 
			-> Therefore, JavaScript is an object-oriented programming language.
		6. Static Vs Dynamic Typing.
			
			-> Static Typing means when you create a variable you need to tell the computer what kind of data will be stored in it (Text, Numeric, something else...) and you can't change it after the fact.
			-> Dynamic Typing means you don't need to tell the computer what kind of data will be stored in a variable when you create it. The types are checked as the program runs (at "runtime").



2. Features of javaScript?
	
	-> JavaScript is case sensitive.
	-> JavaScript is object based language as it provides predefined objects.
		-> for ex:- 	1. Date( ) Object.
				2. Math	object.
	-> And also Predefined methods.
	-> JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language.



3. Applications of Javascript Programming?

	-> Client side validation.
	-> Manipulating HTML Pages.
	-> User Notifications.
	-> Back-end Data Loading.
	-> Presentations.
	-> Server Applications. for ex:- Express,Meteor,Next.js.




4. JavaScript Datatypes ?
	-> Data types basically specify what kind of data can be stored and manipulated within a program.
	-> Mainly Javascript Provides two data types.

		1. Primitive data type.(imutable)
			-> String,Number,Boolean,Undefined,null,void.

		2. Non-Primitive Data type.(mutable)
			-> Object,Arrays,Functions.



5. Javascript Variables?

	-> Variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container.
	-> JavaScript Variable Scope:-
		-> The scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.
			1. Global Scope.
			2. local Scope.
	-> There are three key words in javascript that we can use to create a variable.
		1. var.(global Scope).
		2. let.(loacal Scope)
		3. const.(local scope with Constant values)
			-> All of these three key words provide the same functionality where as the only diffrence between them is the scopes of those variable.



6. JavaScript Operators:-
	-> JavaScript operators are symbols that are used to perform operations on operands.
	-> JavaScript supports the following types of operators.
		1. Arithmetic Operators.
		2. Comparison Operators.
		3. Logical (or Relational) Operators.
		4. Assignment Operators.
		5. Conditional (or ternary) Operators.
		6. typeof Operator.



7. Conditional statements:- 
	1. If-else statements
		-> if Statement.
		-> if-else statement.
		-> if-else if statement.
	
	2. Switch Case Statement.



8. looping Statements :-
	1. while loops.
		-> while loop.
		-> do-while loop.
	2. for loop.
	3. for-in loop.
	4. for-of loop.



9. javascript Functions:-
	-> A function is a group of reusable code which can be called anywhere in your program. Thus it enables the code reusablity.
	-> function can be declared using a keyword "function" followed by a unique function name, a list of parameters, and a statement block surrounded by curly braces.
	-> we can call a function by simply specifying the name of the function.

	-> Javascript provides four types of Function:-

		1. Named Functions.
			-> syntax function functionName (args) { function statements }.

		2. Anonymous Function.
			-> var getName = function( args ) { statements }.

		3. IIFE(Immediately Invoked Function Expression).
			-> syntax (function ( args ) { statements }) ().
		4.  Arrow Function.
			-> syntax  (args) => { Statements }
	
	1. what is call back function.
		-> As we know, in JavaScript, functions are objects. 
		-> Because of this, functions can take functions as arguments, and other functions can also return it. 
		-> Functions that take the additional function as a parameter are called higher-order functions.
		-> and the function which passes as an argument is called a callback function. 




10. JavaScript  Events:-

	-> JavaScript's interaction with HTML is handled through events that occur when the user or the browser manipulates a page.
	-> we can use these events to execute JavaScript coded responses, which cause buttons to close windows, messages to be displayed to users, data to be validated,
	   and virtually any other type of response imaginable.
	-> Events are a part of the Document Object Model (DOM) Level 3 and every HTML element contains a set of events which can trigger JavaScript Code.



11. Synchronous And Asynchronous Programming ?.
	Synchronous :- 
		-> Synchronous Codes will execute in a sequential manner. which means one after the other line by line.
		-> Asynchronous code will excute in a non-sequential manner. which means it's completly dependent on that codes how much delay it'll take.



12. Why do we need call back funtcion ?.
	-> This is called asynchronous programming. Callbacks make sure that a function is not going to run before a task is completed but will run right after the task has completed.
	-> It helps us develop asynchronous JavaScript code and keeps us safe from problems and errors.
	-> Senario where we need Call back functions :- 
		-> Basically the use of callback helps us when we need to use the result of the first function into another function,
	   	   and of course we can use it in a direct way but what if the first function did not respond to any result and we have already passed it to lower function,
	   	   then it will results to undefined and later if one had tried to mutate that passed value it will result in error like can not mutate or assign value of undefined.





13. what is "this" key word in javascript ?.
	-> Basically, ‘this’ keyword is used to refer to some object or function in JavaScript.
		-> Extra Info :- 
			-> All the object-oriented programming languages such as C++, Java, etc. provides the “this” keyword to refer to an instance of an object from within class definition.
			-> But the “this” keyword in JavaScript has varying usage and creates a lot of confusion in JavaScript.
			-> This confusion is because the behavior of “this” in JavaScript is different if we compare it with another programming language, as it always has a different contextual meaning depending on where its put to use.
			-> 	Usage (Context)	    		    Refers to
				In a Method	  		Owner Object(Which invoked method).
				Alone		  		Global Object.
				In a function (Default Mode)	Global Object.
				In a function (Strict Mode)	undefined.
				In an event			The element that received the event.



14. What is meta Data ?.
	-> Metadata is simply data about data. It means it is a description and context of the data. It helps to organize, find and understand data.
	-> Example :- Each book has a number of standard metadata on the covers and inside. Cover Page, Table of contents, Summary all of these are meta data that gives picture of what that book is all about.




15. what is variable hoisting in javascript.
	-> Hoisting is a default behaviour of javascript where all the variable and function declarations are moved on top.
	-> This means that irrespective of where the variables and functions are declared, they are moved on top of the scope. The scope can be both local and global.



16. Difference between “ == “ and “ === “ operators.
	-> Both are comparison operators. The difference between both the operators is that,“==” is used to compare values whereas, “ === “ is used to compare both value and types.


17. What is Implicit Type Coercion in javascript.
	-> Implicit type coercion in javascript is automatic conversion of value from one data type to another. It takes place when the operands of an expression are of different data types.
	-> String coercion takes place while using the ‘ + ‘ operator. When a number is added to a string, the number type is always converted to the string type.


18. What is pass-by-value and pass-by-refernce ?.
	-> In JavaScript, primitive data types are passed by value and non-primitive data types are passed by reference.


19. What is closures in javascript ?.
	-> In programming languages, a closure, also lexical closure or function closure, is a technique for implementing lexically scoped name binding in a language with first-class functions.
	-> Operationally, a closure is a record storing a function together with an environment. 


20. What is memoization?
	-> Memoization is a form of caching where the return value of a function is cached based on its parameters.
	-> If the parameter of that function is not changed, the cached version of the function is returned.

Dom Events.

21. What is DOM ?.
	-> The DOM stands for Document Object Model. When a browser loads a web page, then the browser creates the Document Object Model (DOM) for that page.

22. HTML Attribute VS DOM Property with Example
	-> Consider the below example :- 
		Interpolation example: <button disabled='{{IsDisabled}}’>Click Me</button>
		Property binding example: <button [disabled]=’IsDisabled’>Click Me</button>
	-> If you look at the above two examples, you may feel that you are binding to the Button’s disabled attribute, but that is not true. 
	-> You are actually binding to the disabled property of the button object. 
	-> So, the Angular data-binding is all about binding to the DOM object properties and not the HTML element attributes.
	-> What is the difference between the HTML element attribute and DOM property?
		1.The Attributes are defined by HTML whereas the properties are defined by the DOM.
		2.The attribute’s main role is to initializes the DOM properties. So, once the DOM initialization complete, the attributes job is done.
		3.Property values can change, whereas the attribute values can never be changed.
		For More Info Vist :- https://dotnettutorials.net/lesson/html-attribute-vs-dom-property/ (Press Ctrl and click This Link).

23. What are promises in javascript ?. promises*
	-> Promises are used to handle asynchronous operations in JavaScript.
	-> They are easy to manage when dealing with multiple asynchronous operations where callbacks can create callback hell leading to unmanageable code.
	-> Prior to promises events and callback functions were used but they had limited functionalities and created unmanageable code.
	-> Multiple callback functions would create callback hell that leads to unmanageable code.
	-> Events were not good at handling asynchronous operations.
	-> Promises are the ideal choice for handling asynchronous operations in the simplest manner. 
	-> They can handle multiple asynchronous operations easily and provide better error handling than callbacks and events.
	-> Promise Consumers
		-> Promises can be consumed by registering functions using .then and .catch methods.



24. async And await uses in java script ?.  async and await*
	-> JavaScript is always synchronous and single-threaded that provides the event loops. 
	-> The event loops enable us to queue up an activity. 
	-> This activity will not happen until the loops become available after the program that queued the action has completed the execution. 
	-> However, our program contains a large number of functionalities, which causes our code to be asynchronous. The Async/Await functionality is one of them. 
	-> Async/Await is an extension of promises that we get as language support.
	1.JavaScript Async
		-> An async function is a function that is declared with the async keyword and allows the await keyword inside it. 
		-> The async and await keywords allow asynchronous, promise-based behavior to be written more easily and avoid configured promise chains. 
		-> The async keyword may be used with any of the methods for creating a function.
	2.JavaScript Await
		-> JavaScript Await function is used to wait for the promise.
		-> It could only be used inside the async block. It instructs the code to wait until the promise returns a response.

25. Dom Methods in javascript ?.
	1. getElementById
		-> var myVariable = document.getElementById("my_element");
		-> myVariable.style.display = "block";
	2. getElementsByTagName.
		-> var myLinkCollection = document.getElementsByTagName("a");
	3. Node Methods
		-> The different node methods available through DOM manipulation are as follows:
			1. node.childNodes
			2. node.firstChild
			3. node.lastChild
			4. node.parentNode
			5. node.nextSibling
			6. node.previousSibling
		-> <ul id="list">
 		   <li><a href="link1.html" class="link_one">Link Number One</a></li>
  		   <li><a href="link2.html">Link Number Two</a></li>
 		   <li><a href="link3.html">Link Number Three</a></li>
 		   <li><a href="link4.html">Link Number Four</a></li>
		   </ul>
		-> We can access the first link in our unordered list using any one of the following 3 sections of code:
			-> var myLinkList = document.getElementById("list");
			   var myFirstLink = myLinkList.childNodes[0].childNodes[0];
			   alert(myFirstLink.className);
		 
	4. createElement
		-> var myNewListItem = document.createElement("li");
		   var myNewLink = document.createElement("a");
	5. appendChild
		-> var myNewListItem = document.createElement("li");
		   var myNewLink = document.createElement("a");

		   var myLinkList = document.getElementById("list");
		   myLinkList.appendChild(myNewListItem);
		   myLinkList.lastChild.appendChild(myNewLink);
	6. removeChild
		-> var myLinkList = document.getElementById("list");
		   var myRemovedLink = myLinkList.lastChild;
		   myLinkList.removeChild(myRemovedLink);
	7. innerHTML
		-> var myContentHolder = document.getElementById("content");
		   myContentHolder.innerHTML = "<p>This is the dynamic content created by the innerHTML property</p>";



26.what are all the methods we can use on observables


Type Script

1. What is TypeScript?
	-> TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language.
	-> TypeScript is designed for the development of large applications and transcompiles to JavaScript.

2. Features of TypeScript?
	-> Cross-Platform.
	-> Object-Oriented Language.
	-> Static type-checking :- 
		-> TypeScript uses static typing. This is done using type annotations. It helps type checking at compile time.
		-> Thus, you can find errors while typing the code without running your script each time.
		-> Additionally, using the type inference mechanism, if a variable is declared without a type, it will be inferred based on its value.
	-> Optional Static Typing.


3. TypeScript and Object Orientation.
	-> TypeScript is Object-Oriented JavaScript.
	-> Object Orientation is a software development paradigm that follows real-world modelling.
	-> Object Orientation considers a program as a collection of objects that communicate with each other via mechanism called methods.
	-> TypeScript supports these object oriented components too.

		-> Object − An object is a real time representation of any entity. According to Grady Brooch, every object must have three features −

		-> State − described by the attributes of an object

		-> Behavior − describes how the object will act

		-> Identity − a unique value that distinguishes an object from a set of similar such objects.

		-> Class − A class in terms of OOP is a blueprint for creating objects. A class encapsulates data for the object.

		-> Method − Methods facilitate communication between objects.

4. TypeScript Data Types?
	-> The Type System checks the validity of the supplied values, before they are stored or manipulated by the program. This ensures that the code behaves as expected. 
	-> TypeScript suports mainly 3 Data types
		-> The any type.
			-> which is the superset of all dataType.
		-> Built-in types. 
			1. number
			2. string
			3. boolean
			4. void
			5. null
			6. undefined
		-> User-defined Types.
			1. Enumerations (enums).
			2. classes.
			3. interfaces.
			4. arrays.
			5. tuple.
			6. Union :- A union type is a type formed from two or more other types, representing values that may be any one of those types.

5. What is a Class ?.
	-> classes are the fundamental entities which are used to create reusable components.
	-> It is a group of objects which have common properties. 

6. What is Inheritence ?.
	-> It is a mechanism that acquires behaviours and properties of a class from another class.
	-> This allows creating classes from an existing class, and this class is called the derived class.

7. What are object-oriented principles supported by TypeScript?
	-> All objected-oriented principles – Encapsulation, Inheritance, Polymorphism and Abstraction are supported by TypeScript.


Angular Notes

1. What is angular ?.
	-> The Angular is a development platform for building a Single Page Application for mobile and desktop.
	-> It uses Typescript & HTML to build Apps. The Angular itself is written using the Typescript.
	-> It comes with features like component, Directives, Forms, Pipes, HTTP Services, Dependency Injection, etc..,

2. Explain Components, Modules and Services in Angular ?.

	-> Components :- 
		-> In Angular, components are the basic building blocks, which control a part of the UI for any application.
		-> A component is defined using the @Component decorator.
		-> Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component,
		   and a class that contains the business logic for the component.

	-> Modules :- 
		-> A module is a place where we can group components, directives, services, and pipes which are related to the Application Developmnet.
		-> Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements.
		-> Every module is defined with a @NgModule decorator.
		-> By default, modules are of two types:
			1. Root Module.
			2. Feature Module.
		-> Every application can have only one root module whereas, it can have one or more feature modules.
		-> A root module imports BrowserModule, whereas a feature module imports CommonModule.

	-> Services :-
		-> Services are objects which get instantiated only once during the lifetime of an application. 
		-> The main objective of a service is to share data, functions with different components of an Angular application.
		-> A service is defined using a @Injectable decorator. A function defined inside a service can be invoked from any component or directive.

3. lifecycle hooks in Angular ?.
	-> Every component in Angular has a lifecycle, different phases it goes through from the time of creation to the time it's destroyed.
	-> Angular provides hooks to tap into these phases and trigger changes at specific phases in a lifecycle.
	-> Life-Cycle-Hook's Are Defined Below :-
		1. ngOnChanges( ) :-
			 -> This hook/method is called before ngOnInit and whenever one or more input properties of the component changes.
			 -> This method/hook receives a SimpleChanges object which contains the previous and current values of the property.
		2. ngOnInit( ) :- 
			-> This hook gets called once, after the ngOnChanges hook.
			-> It initializes the component and sets the input properties of the component.
		3. ngDoCheck( ) :-
			-> It gets called after ngOnChanges and ngOnInit and is used to detect and act on changes that cannot be detected by Angular.
			-> We can implement our change detection algorithm in this hook.
		4. ngAfterContentInit( ) :-
			-> It gets called after the first ngDoCheck hook.
			-> This hook responds after the content gets projected inside the component.
		5. ngAfterContentChecked( ) :-
			-> It gets called after ngAfterContentInit and every subsequent ngDoCheck.
			-> It responds after the projected content is checked.
		6. ngAfterViewInit( ) :-
			-> It responds after a component's view, or a child component's view is initialized.
		7. ngAfterViewChecked( ) :-
			-> It gets called after ngAfterViewInit, and it responds after the component's view, or the child component's view is checked.	
		8. ngOnDestroy( ) :-
			-> It gets called just before Angular destroys the component. This hook can be used to clean up the code and detach event handlers.


4. Explain string interpolation and property binding in Angular.
	-> Data-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).
	-> Data-binding can be done in two ways, one-way binding and two-way binding.
	-> String interpolation and property binding are parts of data-binding in Angular.
	-> String interpolation and property binding allow only one-way data binding.
	-> String interpolation uses the double curly braces {{ }} to display data from the component.
	-> Using property binding, we can bind the DOM properties of an HTML element to a component's property.
	-> Property binding uses the square brackets [ ] syntax.

5. Dependency Injection ?.
	-> Dependency injection is an application design pattern which is implemented by Angular.
	-> dependencies in angular are nothing but services which have a functionality.
	-> Functionality of a service, can be needed by various components and directives in an application.
	-> Angular provides a smooth mechanism by which we can inject these dependencies in our components and directives.
	-> So basically, we are just making dependencies which are injectable across all components of an application.

6. Routing in angular ?.
	-> Angular routing is the method to direct the users to the relevant page that they want to perform their actions.
	-> In other words, There may be multiple components in a single angular app. Routing is the way to implement the connection between those components.


7. What is Angular material ?.
	-> Angular material is a Coponent Libray, Which provides us with Components to build Awesome user interfaces in quick time.

8. Directives in angular ?.
	-> Directives are classes that add additional behavior to elements in your Angular applications.
	-> Directives can extend, Change  or modify behavior of the DOM elements.
	-> Angular suports three types of Directives.

	1.Component Directive.
                -> directives with a template. This type of directive is the most common directive type.

	2.Attribut Directives.
                -> directives that change the appearance or behavior of an element, component, or another directive.
                -> Many NgModules such as the RouterModule and the FormsModule define their own attribute directives. 
                -> The most common attribute directives are as follows:
                        1.ngClass.
			2.ngStyle.
			3.ngModle.

	3.Structural Directices.
                -> directives that change the DOM layout by adding and removing DOM elements.
                -> Structural directives are responsible for HTML layout. 
                -> They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.
                -> There are three types of structural Directices
                    1. ngIf.
                    2. ngFor.
                    3. ngSwitch.

	4. custom Dierective 
		-> custom directive is a user-defined directive that provides users to use desired functions to extend HTML functionality.
		-> Command to generate directive using cli is :-- ng g d directiveName.

9. Observables:- 
	-> Observables are sequence of data that are gets emitted from time to time or over peiod of time.
	-> Observables provide support for passing messages between parts of our appliaction.
	-> Observables are the recommanded technique for event handling, Asynchronous programming, and handling multiple values.



NODE JS notes

1. What is Node JS ?.
	-> Node.js is an open-source, cross-platform JavaScript runtime environment used for executing JavaScript code outside of a web browser.
	-> 
